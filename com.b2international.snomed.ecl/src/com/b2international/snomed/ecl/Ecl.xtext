/*
 * Copyright 2021 B2i Healthcare Pte Ltd, http://b2i.sg
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar com.b2international.snomed.ecl.Ecl hidden(WS, ML_COMMENT, SL_COMMENT)

generate ecl "http://www.b2international.com/snomed/Ecl"
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Script:
	{Script} (constraint=ExpressionConstraint)?;

ExpressionConstraint:
	OrExpressionConstraint;

OrExpressionConstraint returns ExpressionConstraint:
	AndExpressionConstraint ({OrExpressionConstraint.left=current} DISJUNCTION_KEYWORD right=AndExpressionConstraint)*;

AndExpressionConstraint returns ExpressionConstraint:
	ExclusionExpressionConstraint ({AndExpressionConstraint.left=current} (CONJUNCTION_KEYWORD | COMMA) right=ExclusionExpressionConstraint)*;

ExclusionExpressionConstraint returns ExpressionConstraint:
	RefinedExpressionConstraint ({ExclusionExpressionConstraint.left=current} EXCLUSION_KEYWORD right=RefinedExpressionConstraint)?;

RefinedExpressionConstraint returns ExpressionConstraint:
	DottedExpressionConstraint ({RefinedExpressionConstraint.constraint=current} COLON refinement=EclRefinement)?;

DottedExpressionConstraint returns ExpressionConstraint:
	FilteredExpressionConstraint ({DottedExpressionConstraint.constraint=current} DOT attribute=FilteredExpressionConstraint)*;

FilteredExpressionConstraint returns ExpressionConstraint:
	SubExpressionConstraint ({FilteredExpressionConstraint.constraint=current} filter=FilterConstraint)*;
	
SubExpressionConstraint returns ExpressionConstraint:
	ChildOf | ChildOrSelfOf | DescendantOf | DescendantOrSelfOf | ParentOf | ParentOrSelfOf | AncestorOf | AncestorOrSelfOf | EclFocusConcept;

EclFocusConcept returns ExpressionConstraint:
	MemberOf | EclConceptReference | Any | NestedExpression;
	
ChildOf:
	LT_EM constraint=EclFocusConcept;

ChildOrSelfOf:
	DBL_LT_EM constraint=EclFocusConcept;

DescendantOf:
	LT constraint=EclFocusConcept;

DescendantOrSelfOf:
	DBL_LT constraint=EclFocusConcept;

ParentOf:
	GT_EM constraint=EclFocusConcept;
	
ParentOrSelfOf:
	DBL_GT_EM constraint=EclFocusConcept;

AncestorOf:
	GT constraint=EclFocusConcept;

AncestorOrSelfOf:
	DBL_GT constraint=EclFocusConcept;

MemberOf:
	CARET constraint=(EclConceptReference | Any | NestedExpression);

EclConceptReference:
	id=SnomedIdentifier (term=PIPE_DELIMITED_STRING)?;

EclConceptReferenceSet:
	ROUND_OPEN (concepts+=EclConceptReference)+ ROUND_CLOSE; 

Any:
	WILDCARD {Any};

EclRefinement:
	OrRefinement;

OrRefinement returns EclRefinement:
	AndRefinement -> ({OrRefinement.left=current} DISJUNCTION_KEYWORD right=AndRefinement)*;

AndRefinement returns EclRefinement:
	SubRefinement -> ({AndRefinement.left=current} (CONJUNCTION_KEYWORD | COMMA) right=SubRefinement)*;

SubRefinement returns EclRefinement:
	AttributeConstraint | EclAttributeGroup | NestedRefinement;

NestedRefinement:
	ROUND_OPEN nested=EclRefinement ROUND_CLOSE;

EclAttributeGroup:
	(cardinality=Cardinality)? CURLY_OPEN refinement=EclAttributeSet CURLY_CLOSE;

EclAttributeSet returns EclRefinement:
	OrAttributeSet;

OrAttributeSet returns EclRefinement:
	AndAttributeSet ({OrRefinement.left=current} DISJUNCTION_KEYWORD right=AndAttributeSet)*;

AndAttributeSet returns EclRefinement:
	SubAttributeSet ({AndRefinement.left=current} (CONJUNCTION_KEYWORD | COMMA) right=SubAttributeSet)*;

SubAttributeSet returns EclRefinement:
	AttributeConstraint | NestedAttributeSet;

NestedAttributeSet returns NestedRefinement:
	ROUND_OPEN nested=EclAttributeSet ROUND_CLOSE;

AttributeConstraint:
	(cardinality=Cardinality)? (reversed?=REVERSED)? attribute=FilteredExpressionConstraint (comparison=Comparison)?;

Cardinality:
	SQUARE_OPEN min=NonNegativeInteger TO max=MaxValue SQUARE_CLOSE;

Comparison:
	AttributeComparison | DataTypeComparison;

AttributeComparison:
	op=NON_NUMERIC_OPERATOR value=FilteredExpressionConstraint;

DataTypeComparison:
	BooleanValueComparison
	| StringValueComparison
	| IntegerValueComparison
	| DecimalValueComparison;

BooleanValueComparison:
	op=NON_NUMERIC_OPERATOR value=Boolean;

StringValueComparison:
	op=NON_NUMERIC_OPERATOR value=STRING;

IntegerValueComparison:
	op=NUMERIC_OPERATOR HASH value=Integer;

DecimalValueComparison:
	op=NUMERIC_OPERATOR HASH value=Decimal;

NestedExpression:
	ROUND_OPEN nested=ExpressionConstraint ROUND_CLOSE;

// filters

FilterConstraint:
	DOUBLE_CURLY_OPEN Filter DOUBLE_CURLY_CLOSE;

Filter:
	DisjunctionFilter;

// Conjunction (OR) of filters is an extension to ECL 1.5
DisjunctionFilter returns Filter:
	ConjunctionFilter ({DisjunctionFilter.left=current} DISJUNCTION_KEYWORD right=ConjunctionFilter)*;

// Using the "AND" keyword for disjunctions is an extension to ECL 1.5
ConjunctionFilter returns Filter:
	PropertyFilter ({ConjunctionFilter.left=current} (CONJUNCTION_KEYWORD | COMMA) right=PropertyFilter)*;

NestedFilter:
	ROUND_OPEN nested=Filter ROUND_CLOSE;

PropertyFilter:
	// ECL 1.5 filters
	TermFilter 
	| LanguageFilter 
	| TypeFilter 
	| DialectFilter 
	// QL 0.1 filters (ECL extensions)	 
	| ActiveFilter 
	| PreferredInFilter
	| AcceptableInFilter
	| LanguageRefSetFilter
	| ModuleFilter
	| SemanticTagFilter
	| EffectiveTimeFilter
	| CaseSignificanceFilter 
	// Allows grouping filters for boolean operators
	| NestedFilter;
 
TermFilter:
	TERM_KEYWORD (TypedTermFilter | TypedTermFilterSet);

// no special treatment for the term filter STRING, we allow everything for any lexical search type
TypedTermFilter:
	op=NON_NUMERIC_OPERATOR clause=TypedTermFilterClause;

TypedTermFilterSet:
	op=NON_NUMERIC_OPERATOR ROUND_OPEN (clauses+=TypedTermFilterClause)+ ROUND_CLOSE;

TypedTermFilterClause:
	(lexicalSearchType=LEXICAL_SEARCH_TYPE COLON)? term=STRING;

LanguageFilter:
	LANGUAGE_KEYWORD op=NON_NUMERIC_OPERATOR (languageCodes+=UnquotedString | ROUND_OPEN (languageCodes+=UnquotedString)+ ROUND_CLOSE);

TypeFilter:
	TypeIdFilter | TypeTokenFilter;

TypeIdFilter:
	TYPEID_KEYWORD op=NON_NUMERIC_OPERATOR type=(EclConceptReference | EclConceptReferenceSet);

// Any unquoted string is allowed as a type token here, validator will restrict it to the available set
TypeTokenFilter:
	TYPE_KEYWORD op=NON_NUMERIC_OPERATOR (tokens+=UnquotedString | ROUND_OPEN (tokens+=UnquotedString)+ ROUND_CLOSE);

DialectFilter:
 	DialectIdFilter | DialectAliasFilter;

DialectIdFilter:
	DIALECTID_KEYWORD op=NON_NUMERIC_OPERATOR (dialects+=Dialect | ROUND_OPEN (dialects+=Dialect)+ ROUND_CLOSE);

DialectAliasFilter:
	DIALECT_KEYWORD op=NON_NUMERIC_OPERATOR (dialects+=DialectAlias | ROUND_OPEN (dialects+=DialectAlias)+ ROUND_CLOSE);

Dialect:
	languageRefSetId=EclConceptReference (acceptability=Acceptability)?;

// Whitespace is significant (indicates an unquoted string boundary) in this rule, so WS tokens can not be hidden
DialectAlias hidden():
	alias=DialectAliasValue WS* (acceptability=Acceptability)?;

Acceptability:
	AcceptabilityIdSet | AcceptabilityTokenSet;

AcceptabilityIdSet:
	acceptabilities=EclConceptReferenceSet;

AcceptabilityTokenSet:
	ROUND_OPEN (acceptabilities+=UnquotedString)+ ROUND_CLOSE;

ActiveFilter:
	(domain=DOMAIN DOT)? ACTIVE_KEYWORD EQUAL active=Boolean;

ModuleFilter:
	(domain=DOMAIN DOT)? MODULEID_KEYWORD EQUAL moduleId=ExpressionConstraint;

SemanticTagFilter:
	(domain=DOMAIN DOT)? SEMANTIC_TAG_KEYWORD op=NON_NUMERIC_OPERATOR semanticTag=STRING;

EffectiveTimeFilter:
	(domain=DOMAIN DOT)? EFFECTIVE_TIME_KEYWORD op=NUMERIC_OPERATOR effectiveTime=STRING;

PreferredInFilter:
	PREFERRED_IN_KEYWORD EQUAL languageRefSetId=ExpressionConstraint;

AcceptableInFilter:
	ACCEPTABLE_IN_KEYWORD EQUAL languageRefSetId=ExpressionConstraint;

LanguageRefSetFilter:
	LANGUAGE_REFSET_ID_KEYWORD EQUAL languageRefSetId=ExpressionConstraint;

CaseSignificanceFilter:
	CASE_SIGNIFICANCE_ID_KEYWORD EQUAL caseSignificanceId=ExpressionConstraint;

/*
 * Datatype rules
 */
SnomedIdentifier hidden():
	(DIGIT_NONZERO | DIGIT_ZERO)+;

NonNegativeInteger returns ecore::EInt hidden():
	(DIGIT_NONZERO | DIGIT_ZERO)+;

NonNegativeDecimal returns ecore::EBigDecimal hidden():
	NonNegativeInteger DOT (DIGIT_NONZERO | DIGIT_ZERO)*;

MaxValue returns ecore::EInt hidden():
	NonNegativeInteger | WILDCARD;

Integer returns ecore::EInt hidden():
	(PLUS | DASH)? NonNegativeInteger;

Decimal returns ecore::EBigDecimal hidden():
	(PLUS | DASH)? NonNegativeDecimal;
	
Boolean returns ecore::EBoolean hidden(): 
	TRUE_KEYWORD | FALSE_KEYWORD;

// Unquoted strings also need to cover any keywords caught by the lexer, earlier in the process. They are terminated by whitespace.
UnquotedString
	: CASE_SIGNIFICANCE_ID_KEYWORD 
	| LANGUAGE_REFSET_ID_KEYWORD 
	| EFFECTIVE_TIME_KEYWORD 
	| ACCEPTABLE_IN_KEYWORD 
	| DESCRIPTION_KEYWORD 
	| PREFERRED_IN_KEYWORD 
	| SEMANTIC_TAG_KEYWORD 
	| DIALECTID_KEYWORD 
	| LANGUAGE_KEYWORD 
	| MODULEID_KEYWORD 
	| CONCEPT_KEYWORD 
	| DIALECT_KEYWORD 
	| ACTIVE_KEYWORD 
	| TYPEID_KEYWORD
	| EXCLUSION_KEYWORD
	| EXACT_KEYWORD 
	| FALSE_KEYWORD 
	| MATCH_KEYWORD 
	| REGEX_KEYWORD 
	| TERM_KEYWORD 
	| TRUE_KEYWORD 
	| TYPE_KEYWORD
	| WILD_KEYWORD 
	| CONJUNCTION_KEYWORD 
	| DISJUNCTION_KEYWORD 
	| REVERSED
	| KEYWORD;

DialectAliasValue hidden():
	(DASH | UnquotedString | DIGIT_ZERO | DIGIT_NONZERO)+;

LEXICAL_SEARCH_TYPE
	// Lexical search types supported in ECL 1.5 
	: MATCH_KEYWORD 
	| WILD_KEYWORD
	// Lexical search type extensions
	| REGEX_KEYWORD
	| EXACT_KEYWORD
	;

DOMAIN
	: CONCEPT_KEYWORD 
	| DESCRIPTION_KEYWORD
	; 

NON_NUMERIC_OPERATOR:
	EQUAL | NOT_EQUAL;

NUMERIC_OPERATOR:
	EQUAL | NOT_EQUAL | GT | LT | GTE | LTE;

/* 
 * Terminal rules (note that the order of definition matters when an 
 * ambiguity is encountered during lexical analysis)
 * 
 * Each rule includes a recommended form that is used for content assist 
 * purposes. ANTLR warnings saying that the case-insensitive alternative
 * can also match the same input are to be expected.
 */ 
 
terminal CASE_SIGNIFICANCE_ID_KEYWORD: 
	'caseSignificanceId' | ('C'|'c')('A'|'a')('S'|'s')('E'|'e')('S'|'s')('I'|'i')('G'|'g')('N'|'n')('I'|'i')('F'|'f')('I'|'i')('C'|'c')('A'|'a')('N'|'n')('C'|'c')('E'|'e')('I'|'i')('D'|'d');

terminal LANGUAGE_REFSET_ID_KEYWORD: 
	'languageRefsetId' | ('L'|'l')('A'|'a')('N'|'n')('G'|'g')('U'|'u')('A'|'a')('G'|'g')('E'|'e')('R'|'r')('E'|'e')('F'|'f')('S'|'s')('E'|'e')('T'|'t')('I'|'i')('D'|'d');

terminal EFFECTIVE_TIME_KEYWORD: 
	'effectiveTime' | ('E'|'e')('F'|'f')('F'|'f')('E'|'e')('C'|'c')('T'|'t')('I'|'i')('V'|'v')('E'|'e')('T'|'t')('I'|'i')('M'|'m')('E'|'e');

terminal ACCEPTABLE_IN_KEYWORD: 
	'acceptableIn' | ('A'|'a')('C'|'c')('C'|'c')('E'|'e')('P'|'p')('T'|'t')('A'|'a')('B'|'b')('L'|'l')('E'|'e')('I'|'i')('N'|'n');

terminal DESCRIPTION_KEYWORD: 
	'Description' | ('D'|'d')('E'|'e')('S'|'s')('C'|'c')('R'|'r')('I'|'i')('P'|'p')('T'|'t')('I'|'i')('O'|'o')('N'|'n');

terminal PREFERRED_IN_KEYWORD: 
	'preferredIn' | ('P'|'p')('R'|'r')('E'|'e')('F'|'f')('E'|'e')('R'|'r')('R'|'r')('E'|'e')('D'|'d')('I'|'i')('N'|'n');

terminal SEMANTIC_TAG_KEYWORD: 
	'semanticTag' | ('S'|'s')('E'|'e')('M'|'m')('A'|'a')('N'|'n')('T'|'t')('I'|'i')('C'|'c')('T'|'t')('A'|'a')('G'|'g');

terminal DIALECTID_KEYWORD: 
	'dialectId' | ('D'|'d')('I'|'i')('A'|'a')('L'|'l')('E'|'e')('C'|'c')('T'|'t')('I'|'i')('D'|'d');

terminal LANGUAGE_KEYWORD: 
	'language' | ('L'|'l')('A'|'a')('N'|'n')('G'|'g')('U'|'u')('A'|'a')('G'|'g')('E'|'e');

terminal MODULEID_KEYWORD: 
	'moduleId' | ('M'|'m')('O'|'o')('D'|'d')('U'|'u')('L'|'l')('E'|'e')('I'|'i')('D'|'d');

terminal CONCEPT_KEYWORD: 
	'Concept' | ('C'|'c')('O'|'o')('N'|'n')('C'|'c')('E'|'e')('P'|'p')('T'|'t');

terminal DIALECT_KEYWORD: 
	'dialect' | ('D'|'d')('I'|'i')('A'|'a')('L'|'l')('E'|'e')('C'|'c')('T'|'t');

terminal ACTIVE_KEYWORD: 
	'active' | ('A'|'a')('C'|'c')('T'|'t')('I'|'i')('V'|'v')('E'|'e');

terminal TYPEID_KEYWORD:
	'typeId' | ('T'|'t')('Y'|'y')('P'|'p')('E'|'e')('I'|'i')('D'|'d');

terminal EXCLUSION_KEYWORD:
	'MINUS' | ('M'|'m')('I'|'i')('N'|'n')('U'|'u')('S'|'s');

terminal EXACT_KEYWORD: 
	'exact' | ('E'|'e')('X'|'x')('A'|'a')('C'|'c')('T'|'t');

terminal FALSE_KEYWORD: 
	'false' | ('F'|'f')('A'|'a')('L'|'l')('S'|'s')('E'|'e');

terminal MATCH_KEYWORD: 
	'match' | ('M'|'m')('A'|'a')('T'|'t')('C'|'c')('H'|'h');

terminal REGEX_KEYWORD: 
	'regex' | ('R'|'r')('E'|'e')('G'|'g')('E'|'e')('X'|'x');

terminal TERM_KEYWORD: 
	'term' | ('T'|'t')('E'|'e')('R'|'r')('M'|'m');

terminal TRUE_KEYWORD: 
	'true' | ('T'|'t')('R'|'r')('U'|'u')('E'|'e');

terminal TYPE_KEYWORD:
	'type' | ('T'|'t')('Y'|'y')('P'|'p')('E'|'e');

terminal WILD_KEYWORD: 
	'wild' | ('W'|'w')('I'|'i')('L'|'l')('D'|'d');

terminal CONJUNCTION_KEYWORD: 
	'AND' | ('A'|'a')('N'|'n')('D'|'d');

terminal DISJUNCTION_KEYWORD: 
	'OR' | ('O'|'o')('R'|'r');

terminal REVERSED:
	'R';

terminal KEYWORD:
	('a'..'z' | 'A'..'Z')+;
 
terminal DBL_LT_EM:
	'<<!';
	
terminal DBL_GT_EM:
	'>>!';

terminal DBL_LT:
	'<<';

terminal DBL_GT:
	'>>';

terminal LT_EM:
	'<!';

terminal GT_EM:
	'>!';

terminal GTE:
	'>=';

terminal LTE:
	'<=';

terminal DOUBLE_CURLY_OPEN:
	'{{';

terminal DOUBLE_CURLY_CLOSE:
	'}}';
	
terminal PIPE_DELIMITED_STRING:
	"|" -> "|";

// XXX: Rule name needs to be STRING so that the default Xtext conversion service can remove quotes
terminal STRING:
	'"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' |
	"'" ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'"; 

terminal TO:
	'..';

terminal COMMA:
	',';
	
terminal DIGIT_ZERO:
	'0';

terminal DIGIT_NONZERO:
	'1'..'9';

terminal COLON:
	':';

terminal CURLY_OPEN:
	'{';

terminal CURLY_CLOSE:
	'}';

terminal ROUND_OPEN:
	'(';

terminal ROUND_CLOSE:
	')';

terminal SQUARE_OPEN:
	'[';

terminal SQUARE_CLOSE:
	']';

terminal PLUS:
	'+';

terminal DASH:
	'-';

terminal CARET:
	'^';

terminal DOT:
	'.';
	
terminal WILDCARD:
	'*';

terminal EQUAL:
	'=';

terminal NOT_EQUAL:
	'!=';

terminal LT:
	'<';

terminal GT:
	'>';

terminal HASH:
	'#';

terminal WS:
	(' ' | '\t' | '\n' | '\r');

terminal ML_COMMENT:
	'/*' -> '*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;
