/*
 * Copyright 2021-2022 B2i Healthcare Pte Ltd, http://b2i.sg
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar com.b2international.snomed.ecl.Ecl hidden(WS, ML_COMMENT, SL_COMMENT)

generate ecl "http://www.b2international.com/snomed/Ecl"

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Script:
	{Script} (constraint=ExpressionConstraint)?;

ExpressionConstraint:
	OrExpressionConstraint;

OrExpressionConstraint returns ExpressionConstraint:
	AndExpressionConstraint ({OrExpressionConstraint.left=current} DISJUNCTION_KEYWORD right=AndExpressionConstraint)*;

AndExpressionConstraint returns ExpressionConstraint:
	ExclusionExpressionConstraint ({AndExpressionConstraint.left=current} (CONJUNCTION_KEYWORD | COMMA) right=ExclusionExpressionConstraint)*;

ExclusionExpressionConstraint returns ExpressionConstraint:
	RefinedExpressionConstraint ({ExclusionExpressionConstraint.left=current} EXCLUSION_KEYWORD right=RefinedExpressionConstraint)?;

RefinedExpressionConstraint returns ExpressionConstraint:
	DottedExpressionConstraint ({RefinedExpressionConstraint.constraint=current} COLON refinement=EclRefinement)?;

DottedExpressionConstraint returns ExpressionConstraint:
	SupplementExpressionConstraint ({DottedExpressionConstraint.constraint=current} DOT attribute=SupplementExpressionConstraint)*;

SupplementExpressionConstraint returns ExpressionConstraint:
	FilteredExpressionConstraint ({SupplementExpressionConstraint.constraint=current} supplement=Supplement)?;
	
FilteredExpressionConstraint returns ExpressionConstraint:
	SubExpressionConstraint ({FilteredExpressionConstraint.constraint=current} filter=FilterConstraint)*;
	
SubExpressionConstraint returns ExpressionConstraint:
	ChildOf | ChildOrSelfOf | DescendantOf | DescendantOrSelfOf | ParentOf | ParentOrSelfOf | AncestorOf | AncestorOrSelfOf | EclFocusConcept;

EclFocusConcept returns ExpressionConstraint:
	MemberOf | EclConceptReference | Any | NestedExpression;
	
ChildOf:
	LT_EM constraint=EclFocusConcept;

ChildOrSelfOf:
	DBL_LT_EM constraint=EclFocusConcept;

DescendantOf:
	LT constraint=EclFocusConcept;

DescendantOrSelfOf:
	DBL_LT constraint=EclFocusConcept;

ParentOf:
	GT_EM constraint=EclFocusConcept;
	
ParentOrSelfOf:
	DBL_GT_EM constraint=EclFocusConcept;

AncestorOf:
	GT constraint=EclFocusConcept;

AncestorOrSelfOf:
	DBL_GT constraint=EclFocusConcept;

MemberOf:
	CARET (SQUARE_OPEN (refsetFields+=UnquotedString (COMMA refsetFields+=UnquotedString)*) SQUARE_CLOSE)? constraint=(EclConceptReference | Any | NestedExpression);

EclConceptReference:
	id=Identifier (term=PIPE_DELIMITED_STRING)?;

EclConceptReferenceSet:
	ROUND_OPEN (concepts+=EclConceptReference)+ ROUND_CLOSE;

Any:
	WILDCARD {Any};

EclRefinement:
	OrRefinement;

OrRefinement returns EclRefinement:
	AndRefinement -> ({OrRefinement.left=current} DISJUNCTION_KEYWORD right=AndRefinement)*;

AndRefinement returns EclRefinement:
	SubRefinement -> ({AndRefinement.left=current} (CONJUNCTION_KEYWORD | COMMA) right=SubRefinement)*;

SubRefinement returns EclRefinement:
	AttributeConstraint | EclAttributeGroup | NestedRefinement;

NestedRefinement:
	ROUND_OPEN nested=EclRefinement ROUND_CLOSE;

EclAttributeGroup:
	(cardinality=Cardinality)? CURLY_OPEN refinement=EclAttributeSet CURLY_CLOSE;

EclAttributeSet returns EclRefinement:
	OrAttributeSet;

OrAttributeSet returns EclRefinement:
	AndAttributeSet ({OrRefinement.left=current} DISJUNCTION_KEYWORD right=AndAttributeSet)*;

AndAttributeSet returns EclRefinement:
	SubAttributeSet ({AndRefinement.left=current} (CONJUNCTION_KEYWORD | COMMA) right=SubAttributeSet)*;

SubAttributeSet returns EclRefinement:
	AttributeConstraint | NestedAttributeSet;

NestedAttributeSet returns NestedRefinement:
	ROUND_OPEN nested=EclAttributeSet ROUND_CLOSE;

AttributeConstraint:
	(cardinality=Cardinality)? (reversed?=REVERSED)? attribute=FilteredExpressionConstraint (comparison=Comparison)?;

Cardinality:
	SQUARE_OPEN min=NonNegativeInteger TO max=MaxValue SQUARE_CLOSE;

Comparison:
	AttributeComparison | DataTypeComparison;

AttributeComparison:
	op=NON_NUMERIC_OPERATOR value=FilteredExpressionConstraint;

DataTypeComparison:
	BooleanValueComparison
	| StringValueComparison
	| IntegerValueComparison
	| DecimalValueComparison;

BooleanValueComparison:
	op=NON_NUMERIC_OPERATOR value=Boolean;

StringValueComparison:
	op=NON_NUMERIC_OPERATOR value=SearchTerm;

IntegerValueComparison:
	op=NUMERIC_OPERATOR HASH value=Integer;

DecimalValueComparison:
	op=NUMERIC_OPERATOR HASH value=Decimal;

NestedExpression:
	ROUND_OPEN nested=ExpressionConstraint ROUND_CLOSE;

// filters

// Single-letter filter domains are new in ECL 1.6
FilterConstraint:
	DOUBLE_CURLY_OPEN (domain=SHORT_DOMAIN)? filter=Filter DOUBLE_CURLY_CLOSE;

Filter:
	DisjunctionFilter;

// Conjunction (OR) of filters is an extension to ECL 1.6
DisjunctionFilter returns Filter:
	ConjunctionFilter ({DisjunctionFilter.left=current} DISJUNCTION_KEYWORD right=ConjunctionFilter)*;

// Using the "AND" keyword for filter disjunction is an extension to ECL 1.6
ConjunctionFilter returns Filter:
	PropertyFilter ({ConjunctionFilter.left=current} (CONJUNCTION_KEYWORD | COMMA) right=PropertyFilter)*;

NestedFilter:
	ROUND_OPEN nested=Filter ROUND_CLOSE;

PropertyFilter:
	// Description filters in ECL 1.6
	TermFilter 
	| LanguageFilter 
	| TypeFilter 
	| DialectFilter 
	// Concept filters in ECL 1.6
	| DefinitionStatusFilter
	// Concept (Description and Member) filters in ECL 1.6, component filters in QL 0.1 (extension)
	| ModuleFilter
	| EffectiveTimeFilter
	| ActiveFilter 
	// Component filters in QL 0.1 (extension)
	| SemanticTagFilter
	// Description filters in QL 0.1 (extension)
	| PreferredInFilter
	| AcceptableInFilter
	| LanguageRefSetFilter
	| CaseSignificanceFilter
	// Member filters in ECL 2.0
	// XXX this should be the last filter due to the UnquotedString refsetFieldName rule
	| MemberFieldFilter
	// Allows grouping filters for boolean operators
	| NestedFilter;

MemberFieldFilter:
	refsetFieldName=UnquotedString comparison=Comparison;

TermFilter:
	TERM_KEYWORD op=NON_NUMERIC_OPERATOR searchTerm=SearchTerm;

// no special treatment for the term filter STRING, we allow everything for any lexical search type
SearchTerm: 
	TypedSearchTerm | TypedSearchTermSet;
	
TypedSearchTerm:
	clause=TypedSearchTermClause;

TypedSearchTermSet:
	ROUND_OPEN (clauses+=TypedSearchTermClause)+ ROUND_CLOSE;

TypedSearchTermClause
	: (lexicalSearchType=LEXICAL_SEARCH_TYPE COLON)? term=STRING
	| lexicalSearchType=REGEX_KEYWORD COLON term=RegularExpression
	;

// Regular expression syntax checking is left to the value converter implementation
RegularExpression:
	STRING; 

LanguageFilter:
	LANGUAGE_KEYWORD op=NON_NUMERIC_OPERATOR (languageCodes+=UnquotedString | ROUND_OPEN (languageCodes+=UnquotedString)+ ROUND_CLOSE);

TypeFilter:
	TypeIdFilter | TypeTokenFilter;

TypeIdFilter:
	TYPEID_KEYWORD op=NON_NUMERIC_OPERATOR type=FilterValue;

// Any unquoted string is allowed as a type token here, validator will restrict it 
// to the available set ("fsn"/"syn"/"def", case insensitive)
TypeTokenFilter:
	TYPE_KEYWORD op=NON_NUMERIC_OPERATOR (tokens+=UnquotedString | ROUND_OPEN (tokens+=UnquotedString)+ ROUND_CLOSE);

DialectFilter:
 	DialectIdFilter | DialectAliasFilter;

DialectIdFilter:
	DIALECTID_KEYWORD op=NON_NUMERIC_OPERATOR (dialects+=Dialect | ROUND_OPEN (dialects+=Dialect)+ ROUND_CLOSE);

DialectAliasFilter:
	DIALECT_KEYWORD op=NON_NUMERIC_OPERATOR (dialects+=DialectAlias | ROUND_OPEN (dialects+=DialectAlias)+ ROUND_CLOSE);

// We will allow filtered expressions within the round parentheses, not simple concept references (extension to ECL 1.6)
Dialect:
	languageRefSetId=FilteredExpressionConstraint (acceptability=Acceptability)?;

// Whitespace is significant (indicates an unquoted string boundary) in this rule, so WS tokens can not be hidden
DialectAlias:
	alias=DialectAliasValue (acceptability=Acceptability)?;

// while the official specification splits this into to separate rules, in order to allow any ID to be parsed in the EclConceptReference rule, it is necessary to treat token aliases as EclConceptReferences
// validation will handle both the token cases (restrict it to the available set ("accept"/"prefer", case insensitive)) and SCTID cases 
Acceptability:
	acceptabilities=EclConceptReferenceSet;
	
// keeping the original pre-2.0 rules commented for reference
//Acceptability:
//	AcceptabilityIdSet | AcceptabilityTokenSet;
//AcceptabilityIdSet:
//	acceptabilities=EclConceptReferenceSet;
//AcceptabilityTokenSet:
//	ROUND_OPEN (acceptabilities+=UnquotedString)+ ROUND_CLOSE;

DefinitionStatusFilter:
	DefinitionStatusIdFilter | DefinitionStatusTokenFilter;
	
DefinitionStatusIdFilter:
	DEFINITION_STATUS_ID_KEYWORD op=NON_NUMERIC_OPERATOR definitionStatus=FilterValue; 

// Any unquoted string is allowed as a definition status token here, validator will restrict it 
// to the available set ("primitive"/"defined", case insensitive)
DefinitionStatusTokenFilter:
	DEFINITION_STATUS_TOKEN_KEYWORD op=NON_NUMERIC_OPERATOR 
	(definitionStatusTokens+=UnquotedString | ROUND_OPEN (definitionStatusTokens+=UnquotedString)+ ROUND_CLOSE);

ModuleFilter:
	MODULEID_KEYWORD op=NON_NUMERIC_OPERATOR moduleId=FilterValue;
	
// Any quoted string is allowed as an effective time literal here; accepted values are:
// - "" (unspecified effective time in ECL 1.6)
// - "Unspecified" (unspecified in Snow Owl)
// - "yyyyMMdd" (effective time in short date format)
EffectiveTimeFilter:
	EFFECTIVE_TIME_KEYWORD op=NUMERIC_OPERATOR effectiveTime=STRING;
	
ActiveFilter:
	ACTIVE_KEYWORD op=NON_NUMERIC_OPERATOR active=ActiveBoolean;

SemanticTagFilter:
	SEMANTIC_TAG_KEYWORD op=NON_NUMERIC_OPERATOR semanticTag=STRING;

PreferredInFilter:
	PREFERRED_IN_KEYWORD EQUAL languageRefSetId=FilterValue;

AcceptableInFilter:
	ACCEPTABLE_IN_KEYWORD EQUAL languageRefSetId=FilterValue;

LanguageRefSetFilter:
	LANGUAGE_REFSET_ID_KEYWORD EQUAL languageRefSetId=FilterValue;

CaseSignificanceFilter:
	CASE_SIGNIFICANCE_ID_KEYWORD EQUAL caseSignificanceId=FilterValue;

FilterValue:
	FilteredExpressionConstraint | EclConceptReferenceSet;

// History Supplement from ECL 2.0
Supplement:
	HistorySupplement;

HistorySupplement:
	DOUBLE_CURLY_OPEN PLUS HISTORY_KEYWORD {HistorySupplement} history=(HistoryProfile | NestedExpression)? DOUBLE_CURLY_CLOSE;

HistoryProfile:
	(DASH | UNDERSCORE) profile = HISTORY_PROFILE_TYPE;
	
/*
 * Datatype rules
 */
Identifier returns ecore::EString:
	(DIGIT | ALPHA | CONCEPT_SHORT_KEYWORD | DESCRIPTION_SHORT_KEYWORD | MEMBER_SHORT_KEYWORD | REVERSED | KEYWORD)+ ((DASH | UNDERSCORE) (DIGIT | ALPHA | CONCEPT_SHORT_KEYWORD | DESCRIPTION_SHORT_KEYWORD | MEMBER_SHORT_KEYWORD | REVERSED | KEYWORD)+)*;

NonNegativeInteger returns ecore::EInt hidden():
	(DIGIT)+;

NonNegativeDecimal returns ecore::EBigDecimal hidden():
	NonNegativeInteger DOT (DIGIT)*;

MaxValue returns ecore::EInt hidden():
	NonNegativeInteger | WILDCARD;

Integer returns ecore::EInt hidden():
	(PLUS | DASH)? NonNegativeInteger;

Decimal returns ecore::EBigDecimal hidden():
	(PLUS | DASH)? NonNegativeDecimal;
	
Boolean returns ecore::EBoolean hidden(): 
	TRUE_KEYWORD | FALSE_KEYWORD;

// Value converter and validation checks for allowed integers 0 and 1
ActiveBoolean returns ecore::EBoolean hidden():
	NonNegativeInteger | Boolean;

// Unquoted strings also need to cover any keywords caught by the lexer, earlier in the process. They are terminated by whitespace.
UnquotedString
	: HISTORY_KEYWORD
	| CASE_SIGNIFICANCE_ID_KEYWORD
	| DEFINITION_STATUS_ID_KEYWORD
	| DEFINITION_STATUS_TOKEN_KEYWORD 
	| LANGUAGE_REFSET_ID_KEYWORD 
	| EFFECTIVE_TIME_KEYWORD 
	| ACCEPTABLE_IN_KEYWORD 
	| PREFERRED_IN_KEYWORD 
	| SEMANTIC_TAG_KEYWORD 
	| DIALECTID_KEYWORD 
	| LANGUAGE_KEYWORD 
	| MODULEID_KEYWORD 
	| DIALECT_KEYWORD 
	| ACTIVE_KEYWORD 
	| TYPEID_KEYWORD
	| EXCLUSION_KEYWORD
	| EXACT_KEYWORD 
	| FALSE_KEYWORD 
	| MATCH_KEYWORD 
	| REGEX_KEYWORD 
	| TERM_KEYWORD 
	| TRUE_KEYWORD 
	| TYPE_KEYWORD
	| WILD_KEYWORD 
	| MIN_KEYWORD
	| MOD_KEYWORD
	| MAX_KEYWORD
	| CONJUNCTION_KEYWORD 
	| DISJUNCTION_KEYWORD 
	| REVERSED
	| MEMBER_SHORT_KEYWORD
	| DESCRIPTION_SHORT_KEYWORD 
	| CONCEPT_SHORT_KEYWORD
	| WILDCARD
	| KEYWORD;

DialectAliasValue:
	(DASH | KEYWORD | DIGIT)+;

LEXICAL_SEARCH_TYPE
	// Lexical search types supported in ECL 1.5 
	: MATCH_KEYWORD 
	| WILD_KEYWORD
	// Lexical search type extensions 
	// REGEX_KEYWORD is used directly in the parser rule, as it requires a special term argument
	| EXACT_KEYWORD
	;

// History Supplement Profile Suffix from ECL 2.0 
HISTORY_PROFILE_TYPE
	: MIN_KEYWORD 
	| MOD_KEYWORD 
	| MAX_KEYWORD
	;

// Single-letter domains for filterConstraints is an ECL 1.6 feature
SHORT_DOMAIN
	: CONCEPT_SHORT_KEYWORD 
	| DESCRIPTION_SHORT_KEYWORD
	| MEMBER_SHORT_KEYWORD // from ECL 2.0
	; 

NON_NUMERIC_OPERATOR:
	EQUAL | NOT_EQUAL;

NUMERIC_OPERATOR:
	EQUAL | NOT_EQUAL | GT | LT | GTE | LTE;

/* 
 * Terminal rules (note that the order of definition matters when an 
 * ambiguity is encountered during lexical analysis)
 * 
 * Each rule includes a recommended form that is used for content assist 
 * purposes. ANTLR warnings saying that the case-insensitive alternative
 * can also match the same input are to be expected.
 */ 

terminal HISTORY_KEYWORD:
	'HISTORY' | ('h'|'H')('i'|'I')('s'|'S')('t'|'T')('o'|'O')('r'|'R')('y'|'Y');

terminal CASE_SIGNIFICANCE_ID_KEYWORD: 
	'caseSignificanceId' | ('C'|'c')('A'|'a')('S'|'s')('E'|'e')('S'|'s')('I'|'i')('G'|'g')('N'|'n')('I'|'i')('F'|'f')('I'|'i')('C'|'c')('A'|'a')('N'|'n')('C'|'c')('E'|'e')('I'|'i')('D'|'d');

terminal DEFINITION_STATUS_ID_KEYWORD:
	'definitionStatusId'| ('d'|'D')('e'|'E')('f'|'F')('i'|'I')('n'|'N')('i'|'I')('t'|'T')('i'|'I')('o'|'O')('n'|'N')('s'|'S')('t'|'T')('a'|'A')('t'|'T')('u'|'U')('s'|'S')('i'|'I')('d'|'D');

terminal DEFINITION_STATUS_TOKEN_KEYWORD:
	'definitionStatus'| ('d'|'D')('e'|'E')('f'|'F')('i'|'I')('n'|'N')('i'|'I')('t'|'T')('i'|'I')('o'|'O')('n'|'N')('s'|'S')('t'|'T')('a'|'A')('t'|'T')('u'|'U')('s'|'S');	
	
terminal LANGUAGE_REFSET_ID_KEYWORD: 
	'languageRefsetId' | ('L'|'l')('A'|'a')('N'|'n')('G'|'g')('U'|'u')('A'|'a')('G'|'g')('E'|'e')('R'|'r')('E'|'e')('F'|'f')('S'|'s')('E'|'e')('T'|'t')('I'|'i')('D'|'d');

terminal EFFECTIVE_TIME_KEYWORD: 
	'effectiveTime' | ('E'|'e')('F'|'f')('F'|'f')('E'|'e')('C'|'c')('T'|'t')('I'|'i')('V'|'v')('E'|'e')('T'|'t')('I'|'i')('M'|'m')('E'|'e');

terminal ACCEPTABLE_IN_KEYWORD: 
	'acceptableIn' | ('A'|'a')('C'|'c')('C'|'c')('E'|'e')('P'|'p')('T'|'t')('A'|'a')('B'|'b')('L'|'l')('E'|'e')('I'|'i')('N'|'n');

terminal PREFERRED_IN_KEYWORD: 
	'preferredIn' | ('P'|'p')('R'|'r')('E'|'e')('F'|'f')('E'|'e')('R'|'r')('R'|'r')('E'|'e')('D'|'d')('I'|'i')('N'|'n');

terminal SEMANTIC_TAG_KEYWORD: 
	'semanticTag' | ('S'|'s')('E'|'e')('M'|'m')('A'|'a')('N'|'n')('T'|'t')('I'|'i')('C'|'c')('T'|'t')('A'|'a')('G'|'g');

terminal DIALECTID_KEYWORD: 
	'dialectId' | ('D'|'d')('I'|'i')('A'|'a')('L'|'l')('E'|'e')('C'|'c')('T'|'t')('I'|'i')('D'|'d');

terminal LANGUAGE_KEYWORD: 
	'language' | ('L'|'l')('A'|'a')('N'|'n')('G'|'g')('U'|'u')('A'|'a')('G'|'g')('E'|'e');

terminal MODULEID_KEYWORD: 
	'moduleId' | ('M'|'m')('O'|'o')('D'|'d')('U'|'u')('L'|'l')('E'|'e')('I'|'i')('D'|'d');

terminal DIALECT_KEYWORD: 
	'dialect' | ('D'|'d')('I'|'i')('A'|'a')('L'|'l')('E'|'e')('C'|'c')('T'|'t');

terminal ACTIVE_KEYWORD: 
	'active' | ('A'|'a')('C'|'c')('T'|'t')('I'|'i')('V'|'v')('E'|'e');

terminal TYPEID_KEYWORD:
	'typeId' | ('T'|'t')('Y'|'y')('P'|'p')('E'|'e')('I'|'i')('D'|'d');

terminal EXCLUSION_KEYWORD:
	'MINUS' | ('M'|'m')('I'|'i')('N'|'n')('U'|'u')('S'|'s');

terminal EXACT_KEYWORD: 
	'exact' | ('E'|'e')('X'|'x')('A'|'a')('C'|'c')('T'|'t');

terminal FALSE_KEYWORD: 
	'false' | ('F'|'f')('A'|'a')('L'|'l')('S'|'s')('E'|'e');

terminal MATCH_KEYWORD: 
	'match' | ('M'|'m')('A'|'a')('T'|'t')('C'|'c')('H'|'h');

terminal REGEX_KEYWORD: 
	'regex' | ('R'|'r')('E'|'e')('G'|'g')('E'|'e')('X'|'x');

terminal TERM_KEYWORD: 
	'term' | ('T'|'t')('E'|'e')('R'|'r')('M'|'m');

terminal TRUE_KEYWORD: 
	'true' | ('T'|'t')('R'|'r')('U'|'u')('E'|'e');

terminal TYPE_KEYWORD:
	'type' | ('T'|'t')('Y'|'y')('P'|'p')('E'|'e');

terminal WILD_KEYWORD: 
	'wild' | ('W'|'w')('I'|'i')('L'|'l')('D'|'d');

terminal MIN_KEYWORD:
	'MIN' | ('M'|'m')('I'|'i')('N'|'n');
	
terminal MOD_KEYWORD:
	'MOD' | ('M'|'m')('O'|'o')('D'|'d');
	
terminal MAX_KEYWORD:
	'MAX' | ('M'|'m')('A'|'a')('X'|'x');

terminal CONJUNCTION_KEYWORD: 
	'AND' | ('A'|'a')('N'|'n')('D'|'d');

terminal DISJUNCTION_KEYWORD: 
	'OR' | ('O'|'o')('R'|'r');

terminal REVERSED:
	'R';

terminal MEMBER_SHORT_KEYWORD:
	'M' | 'm';

terminal DESCRIPTION_SHORT_KEYWORD: 
	'D' | 'd';

terminal CONCEPT_SHORT_KEYWORD: 
	'C' | 'c';

terminal ALPHA:
	'a'..'z' | 'A'..'Z';
	
terminal KEYWORD:
	ALPHA (ALPHA)+;
	
terminal DBL_LT_EM:
	'<<!';
	
terminal DBL_GT_EM:
	'>>!';

terminal DBL_LT:
	'<<';

terminal DBL_GT:
	'>>';

terminal LT_EM:
	'<!';

terminal GT_EM:
	'>!';

terminal GTE:
	'>=';

terminal LTE:
	'<=';

terminal DOUBLE_CURLY_OPEN:
	'{{';

terminal DOUBLE_CURLY_CLOSE:
	'}}';
	
terminal PIPE_DELIMITED_STRING:
	"|" -> "|";

// XXX: Rule name needs to be STRING so that the default Xtext conversion service can remove quotes
terminal STRING:
	'"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' |
	"'" ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'"; 

terminal TO:
	'..';

terminal COMMA:
	',';
	
terminal DIGIT:
	'0'..'9';

terminal COLON:
	':';

terminal CURLY_OPEN:
	'{';

terminal CURLY_CLOSE:
	'}';

terminal ROUND_OPEN:
	'(';

terminal ROUND_CLOSE:
	')';

terminal SQUARE_OPEN:
	'[';

terminal SQUARE_CLOSE:
	']';

terminal PLUS:
	'+';

terminal DASH:
	'-';
	
terminal UNDERSCORE:
	'_';

terminal CARET:
	'^';

terminal DOT:
	'.';
	
terminal WILDCARD:
	'*';

terminal EQUAL:
	'=';

terminal NOT_EQUAL:
	'!=';

terminal LT:
	'<';

terminal GT:
	'>';

terminal HASH:
	'#';

terminal WS:
	(' ' | '\t' | '\n' | '\r');

terminal ML_COMMENT:
	'/*' -> '*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;
